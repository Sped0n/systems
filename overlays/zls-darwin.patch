diff --git a/src/Server.zig b/src/Server.zig
index 13ae7d1..96aa565 100644
--- a/src/Server.zig
+++ b/src/Server.zig
@@ -765,7 +765,7 @@ const Workspace = struct {
 
         if (args.server.runtime_zig_version) |runtime_zig_version| {
             workspace.build_on_save_mode = switch (BuildOnSaveSupport.isSupportedRuntime(runtime_zig_version)) {
-                .supported => .watch,
+                .supported => .manual,
                 // If if build on save has been explicitly enabled, fallback to the implementation with manual updates
                 else => if (args.server.config.enable_build_on_save orelse false) .manual else null,
             };
diff --git a/src/build_runner/0.14.0.zig b/src/build_runner/0.14.0.zig
index d3480df..6c2dfca 100644
--- a/src/build_runner/0.14.0.zig
+++ b/src/build_runner/0.14.0.zig
@@ -468,30 +468,21 @@ const Watch = struct {
     fn init() !Watch {
         return .{
             .fs_watch = if (@TypeOf(std.Build.Watch) != void) try std.Build.Watch.init() else {},
-            .supports_fs_watch = @TypeOf(std.Build.Watch) != void and shared.BuildOnSaveSupport.isSupportedRuntime(builtin.zig_version) == .supported,
+            .supports_fs_watch = false,
             .manual_event = .{},
             .steps = &.{},
         };
     }
 
-    fn update(w: *Watch, gpa: Allocator, steps: []const *Step) !void {
-        if (@TypeOf(std.Build.Watch) != void and w.supports_fs_watch) {
-            return try w.fs_watch.update(gpa, steps);
-        }
+    fn update(w: *Watch, _: Allocator, steps: []const *Step) !void {
         w.steps = steps;
     }
 
     fn trigger(w: *Watch) void {
-        if (w.supports_fs_watch) {
-            @panic("received manualy filesystem event even though std.Build.Watch is supported");
-        }
         w.manual_event.set();
     }
 
     fn wait(w: *Watch, gpa: Allocator, timeout: std.Build.Watch.Timeout) !std.Build.Watch.WaitResult {
-        if (@TypeOf(std.Build.Watch) != void and w.supports_fs_watch) {
-            return try w.fs_watch.wait(gpa, timeout);
-        }
         switch (timeout) {
             .none => w.manual_event.wait(),
             .ms => |ms| w.manual_event.timedWait(@as(u64, ms) * std.time.ns_per_ms) catch return .timeout,

